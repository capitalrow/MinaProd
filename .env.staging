# ==============================================================================
# STAGING ENVIRONMENT CONFIGURATION
# ==============================================================================
# This file defines the staging environment for Mina transcription platform.
# Staging should mirror production as closely as possible while remaining isolated.
#
# USAGE:
#   cp .env.staging .env.staging.local
#   # Fill in real values in .env.staging.local
#   export $(cat .env.staging.local | xargs) && gunicorn --config gunicorn.conf.py main:app
#
# NEVER commit .env.staging.local - it contains secrets!
# ==============================================================================

# ------------------------------------------------------------------------------
# ENVIRONMENT IDENTIFIER
# ------------------------------------------------------------------------------
# Critical: This variable prevents accidental staging → production crossover
ENVIRONMENT=staging
FLASK_ENV=production

# ------------------------------------------------------------------------------
# Security
# ------------------------------------------------------------------------------
# Generate staging-specific secret (do not reuse production secret!)
# Run: python -c "import secrets; print(secrets.token_hex(32))"
SECRET_KEY=CHANGE_ME_STAGING_SECRET_32_BYTES
SESSION_SECRET=CHANGE_ME_STAGING_SESSION_SECRET

# ------------------------------------------------------------------------------
# DATABASE CONFIGURATION (STAGING)
# ------------------------------------------------------------------------------
# CRITICAL: Use separate staging database - NEVER point to production!
# Staging DB should be a separate Postgres instance or schema
#
# Example: Neon/Supabase staging project
# DATABASE_URL=postgresql://user:pass@staging-db.region.neon.tech:5432/mina_staging?sslmode=require
#
# Example: Same Postgres instance, different database
# DATABASE_URL=postgresql://user:pass@localhost:5432/mina_staging
DATABASE_URL=

# Database connection pool settings (same as production)
SQLALCHEMY_POOL_SIZE=10
SQLALCHEMY_MAX_OVERFLOW=20
SQLALCHEMY_POOL_RECYCLE=300
SQLALCHEMY_POOL_PRE_PING=true

# ------------------------------------------------------------------------------
# REDIS CONFIGURATION (STAGING)
# ------------------------------------------------------------------------------
# Use separate Redis instance for staging to avoid cache collisions
# and prevent staging feature flags from affecting production
#
# Example: Upstash staging database
# REDIS_URL=rediss://default:pass@staging-redis.upstash.io:6379
#
# Example: Same Redis, different db number (0=prod, 1=staging)
# REDIS_URL=redis://localhost:6379/1
REDIS_URL=

# ------------------------------------------------------------------------------
# Real-time Transcription Settings
# ------------------------------------------------------------------------------
ENABLE_REALTIME=true
MAX_CHUNK_MS=640
LANGUAGE_HINT=en
MIN_CONFIDENCE=0.6

# M1 Quality Settings
MAX_QUEUE_LEN=8
VOICE_TAIL_MS=300
METRICS_SAMPLE_RATE=1.0
DEDUP_OVERLAP_THRESHOLD=0.9

# ------------------------------------------------------------------------------
# OpenAI Configuration (STAGING)
# ------------------------------------------------------------------------------
# Use separate OpenAI API key for staging to track costs separately
# and prevent staging load from affecting production rate limits
OPENAI_API_KEY=
WHISPER_MODEL=whisper-1

# Transcription Engine Selection
# Options: openai_whisper, local_whisper, mock
TRANSCRIPTION_ENGINE=openai-whisper

# ------------------------------------------------------------------------------
# VAD Settings
# ------------------------------------------------------------------------------
VAD_SENSITIVITY=0.5
VAD_MIN_SPEECH_DURATION=300
VAD_MIN_SILENCE_DURATION=500

# ------------------------------------------------------------------------------
# Audio Processing
# ------------------------------------------------------------------------------
SAMPLE_RATE=16000
CHUNK_SIZE=1024
AUDIO_FORMAT=webm

# ------------------------------------------------------------------------------
# Socket.IO Settings
# ------------------------------------------------------------------------------
SOCKETIO_PING_TIMEOUT=60
SOCKETIO_PING_INTERVAL=25

# Socket.IO buffer limits (10 MB per message)
SIO_MAX_HTTP_BUFFER=10485760

# ------------------------------------------------------------------------------
# M3: Analysis and Summary Settings
# ------------------------------------------------------------------------------
ANALYSIS_ENGINE=openai
AUTO_SUMMARY_ON_FINALIZE=true
SUMMARY_CONTEXT_CHARS=12000

# ------------------------------------------------------------------------------
# M4: Sharing Configuration (STAGING)
# ------------------------------------------------------------------------------
SHARE_LINK_EXPIRY_DAYS=7

# CRITICAL: Use staging-specific base URL
# This prevents staging share links from appearing to be production links
# Example: https://mina-staging.replit.app
SHARE_BASE_URL=http://staging-mina.local:5000

# ------------------------------------------------------------------------------
# Error Tracking (STAGING)
# ------------------------------------------------------------------------------
# Use separate Sentry project for staging (or disable)
# to prevent staging errors from polluting production error tracking
#
# Option 1: Separate Sentry project
# SENTRY_DSN=https://abc123@o123456.ingest.sentry.io/7654321
# SENTRY_ENVIRONMENT=staging
#
# Option 2: Disable Sentry in staging (recommended for cost control)
SENTRY_DSN=
SENTRY_ENVIRONMENT=staging
SENTRY_RELEASE=mina@staging

# ------------------------------------------------------------------------------
# Monitoring and Observability
# ------------------------------------------------------------------------------
# Staging should have same monitoring as production for realistic testing
JSON_LOGS=true
LOG_LEVEL=INFO

# Metrics directory
METRICS_DIR=./metrics

# ------------------------------------------------------------------------------
# Rate Limiting (STAGING)
# ------------------------------------------------------------------------------
# Use more relaxed limits in staging to allow testing
RATE_LIMIT_PER_MINUTE=200
RATE_LIMIT_PER_HOUR=2000

# ------------------------------------------------------------------------------
# Email Service (STAGING)
# ------------------------------------------------------------------------------
# Use staging-specific SendGrid API key or disable email
# to prevent staging from sending real emails to users
#
# Option 1: Staging SendGrid account
# SENDGRID_API_KEY=SG.staging_key
#
# Option 2: Disable email (logs will show what would have been sent)
SENDGRID_API_KEY=

# ------------------------------------------------------------------------------
# Slack Notifications (STAGING)
# ------------------------------------------------------------------------------
# Use staging-specific Slack webhook to avoid polluting production channels
# Example: #mina-staging-alerts instead of #mina-production-alerts
SLACK_WEBHOOK_URL=

# ------------------------------------------------------------------------------
# Object Storage (STAGING)
# ------------------------------------------------------------------------------
# Use separate S3 bucket for staging to prevent data crossover
# Example: mina-audio-staging instead of mina-audio-production
AWS_S3_BUCKET=mina-audio-staging
AWS_ACCESS_KEY_ID=
AWS_SECRET_ACCESS_KEY=
AWS_REGION=us-east-1

# ------------------------------------------------------------------------------
# Deployment Configuration
# ------------------------------------------------------------------------------
HOST=0.0.0.0
PORT=5000

# Gunicorn workers (fewer than production for cost efficiency)
WEB_CONCURRENCY=2

# ------------------------------------------------------------------------------
# Feature Flags (STAGING)
# ------------------------------------------------------------------------------
# Staging is where new features are tested before production
# Enable experimental features here first
ENABLE_AI_INSIGHTS=true
ENABLE_SPEAKER_DIARIZATION=true
ENABLE_REAL_TIME_SENTIMENT=true

# ------------------------------------------------------------------------------
# Testing Configuration
# ------------------------------------------------------------------------------
# Enable additional logging and debug features in staging
ENABLE_PERFORMANCE_PROFILING=true
ENABLE_SQL_QUERY_LOGGING=false

# ------------------------------------------------------------------------------
# CRITICAL SAFETY REMINDERS
# ------------------------------------------------------------------------------
# ✅ Staging checklist before deployment:
# 1. DATABASE_URL points to staging DB (not production!)
# 2. REDIS_URL points to staging Redis (not production!)
# 3. ENVIRONMENT=staging (not production!)
# 4. SHARE_BASE_URL uses staging domain
# 5. SENTRY_ENVIRONMENT=staging (separate error tracking)
# 6. Email/Slack use staging channels (or disabled)
# 7. S3 bucket is staging-specific
# 8. OpenAI key is staging-specific (separate billing)
#
# ❌ NEVER:
# - Point staging to production database
# - Reuse production secrets/API keys
# - Send staging emails to real users
# - Write staging data to production S3
# - Mix staging and production Redis instances
# ==============================================================================
