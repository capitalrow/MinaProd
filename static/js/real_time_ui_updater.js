/**\n * ðŸš€ REAL-TIME UI UPDATER: Handles live transcription updates and performance display\n */\n\nclass RealTimeUIUpdater {\n    constructor() {\n        this.isActive = false;\n        this.interimBuffer = [];\n        this.lastUpdateTime = 0;\n        this.updateThrottle = 500; // Max updates every 500ms\n        \n        this.initializeEventListeners();\n        console.log('âœ… Real-time UI updater initialized');\n    }\n    \n    initializeEventListeners() {\n        // Listen for interim transcription results\n        window.addEventListener('interimTranscription', (event) => {\n            this.handleInterimUpdate(event.detail);\n        });\n        \n        // Listen for session events\n        window.addEventListener('sessionStarted', (event) => {\n            this.handleSessionStart(event.detail);\n        });\n        \n        // Listen for final transcription results\n        window.addEventListener('transcriptionComplete', (event) => {\n            this.handleFinalTranscription(event.detail);\n        });\n    }\n    \n    handleSessionStart(sessionData) {\n        this.isActive = true;\n        this.interimBuffer = [];\n        this.lastUpdateTime = 0;\n        \n        // Show recording indicators\n        this.updateRecordingStatus('recording', 'Live transcription active');\n        \n        console.log(`ðŸŽ¤ UI updater activated for session: ${sessionData.sessionId}`);\n    }\n    \n    handleInterimUpdate(data) {\n        if (!this.isActive) return;\n        \n        const now = Date.now();\n        \n        // Throttle updates to prevent UI overload\n        if (now - this.lastUpdateTime < this.updateThrottle) {\n            this.interimBuffer.push(data);\n            return;\n        }\n        \n        // Process current update and any buffered updates\n        this.processInterimUpdates([data, ...this.interimBuffer]);\n        this.interimBuffer = [];\n        this.lastUpdateTime = now;\n    }\n    \n    processInterimUpdates(updates) {\n        if (updates.length === 0) return;\n        \n        // Get the most recent update with content\n        const latestUpdate = updates.find(update => update.text && update.text.trim()) || updates[0];\n        \n        if (latestUpdate && latestUpdate.text) {\n            this.displayInterimText(latestUpdate);\n            this.updateLiveMetrics(latestUpdate);\n        }\n    }\n    \n    displayInterimText(update) {\n        // Find and update interim display areas\n        const interimElements = [\n            document.getElementById('interim-transcript'),\n            document.getElementById('interim-results'),\n            document.querySelector('.interim-transcript'),\n            document.querySelector('.live-transcript-display')\n        ];\n        \n        const content = `\n            <div class=\"live-interim-result\">\n                <div class=\"interim-text-content\">${update.text}</div>\n                <div class=\"interim-metadata\">\n                    <span class=\"timestamp\">${update.timestamp}</span>\n                    <span class=\"chunk-info\">Chunk ${update.chunkIndex}</span>\n                    ${update.isExtended ? '<span class=\"extended-badge\">Extended</span>' : ''}\n                </div>\n            </div>\n        `;\n        \n        interimElements.forEach(element => {\n            if (element) {\n                element.innerHTML = content;\n                element.style.display = 'block';\n                \n                // Add visual feedback\n                element.classList.add('updating');\n                setTimeout(() => element.classList.remove('updating'), 300);\n            }\n        });\n    }\n    \n    updateLiveMetrics(update) {\n        // Update word count\n        const wordCount = update.text ? update.text.split(' ').length : 0;\n        this.updateMetricDisplay('wordCount', wordCount);\n        \n        // Update status indicators\n        this.updateMetricDisplay('lastActivity', 'Just now');\n        this.updateMetricDisplay('transcriptionStatus', 'Processing...');\n        \n        // Visual pulse effect for activity\n        this.pulseActivityIndicator();\n    }\n    \n    updateMetricDisplay(elementId, value) {\n        const element = document.getElementById(elementId);\n        if (element) {\n            if (element.tagName === 'INPUT' || element.tagName === 'TEXTAREA') {\n                element.value = value;\n            } else {\n                element.textContent = value;\n            }\n        }\n    }\n    \n    pulseActivityIndicator() {\n        const indicators = [\n            document.querySelector('.recording-indicator'),\n            document.querySelector('.activity-pulse'),\n            document.querySelector('.live-status')\n        ];\n        \n        indicators.forEach(indicator => {\n            if (indicator) {\n                indicator.classList.add('pulse');\n                setTimeout(() => indicator.classList.remove('pulse'), 1000);\n            }\n        });\n    }\n    \n    updateRecordingStatus(status, message) {\n        const statusElements = [\n            document.getElementById('recordingStatus'),\n            document.querySelector('.recording-status'),\n            document.querySelector('.status-message')\n        ];\n        \n        statusElements.forEach(element => {\n            if (element) {\n                element.textContent = message;\n                element.className = `recording-status ${status}`;\n            }\n        });\n    }\n    \n    handleFinalTranscription(data) {\n        this.isActive = false;\n        \n        // Clear interim displays\n        const interimElements = [\n            document.getElementById('interim-transcript'),\n            document.getElementById('interim-results'),\n            document.querySelector('.interim-transcript')\n        ];\n        \n        interimElements.forEach(element => {\n            if (element) {\n                element.style.display = 'none';\n            }\n        });\n        \n        // Update recording status\n        this.updateRecordingStatus('completed', 'Transcription complete');\n        \n        console.log('âœ… Final transcription processed, UI updater deactivated');\n    }\n    \n    // Method to manually trigger UI updates\n    refreshDisplay() {\n        if (!this.isActive) return;\n        \n        // Force update all metrics\n        const sessionTime = Math.floor((Date.now() - (this.sessionStart || Date.now())) / 1000);\n        this.updateMetricDisplay('sessionTime', `${sessionTime}s`);\n        \n        console.log('ðŸ”„ UI display manually refreshed');\n    }\n}\n\n// Initialize global real-time UI updater\nwindow.realTimeUIUpdater = new RealTimeUIUpdater();\n\n// Add CSS for real-time UI updates\nconst style = document.createElement('style');\nstyle.textContent = `\n    .live-interim-result {\n        background: rgba(0, 123, 255, 0.1);\n        border-left: 3px solid #007bff;\n        padding: 10px;\n        margin: 5px 0;\n        border-radius: 4px;\n        animation: fadeIn 0.3s ease-in;\n    }\n    \n    .interim-text-content {\n        font-size: 14px;\n        color: #333;\n        margin-bottom: 5px;\n    }\n    \n    .interim-metadata {\n        font-size: 11px;\n        color: #666;\n        display: flex;\n        gap: 10px;\n    }\n    \n    .extended-badge {\n        background: #28a745;\n        color: white;\n        padding: 2px 6px;\n        border-radius: 3px;\n        font-size: 10px;\n    }\n    \n    .updating {\n        animation: pulse 0.3s ease-in-out;\n    }\n    \n    .pulse {\n        animation: pulse 1s ease-in-out;\n    }\n    \n    @keyframes fadeIn {\n        from { opacity: 0; transform: translateY(-10px); }\n        to { opacity: 1; transform: translateY(0); }\n    }\n    \n    @keyframes pulse {\n        0% { transform: scale(1); }\n        50% { transform: scale(1.05); }\n        100% { transform: scale(1); }\n    }\n    \n    .recording-status.recording {\n        color: #dc3545;\n        font-weight: bold;\n    }\n    \n    .recording-status.completed {\n        color: #28a745;\n        font-weight: bold;\n    }\n`;\ndocument.head.appendChild(style);\n\nconsole.log('âœ… Real-time UI updater loaded');"

// [CTO] Defaults to ensure live interim is visible & frequent
window.MINA_FEATURES = Object.assign({
  ENABLE_INTERIM: true,
  SHOW_INTERIM: true,
  REPLACE_INTERIM_ON_FINAL: true,
  INTERIM_THROTTLE_MS: 250,
  RECORDER_TIMESLICE_MS: 250,
}, window.MINA_FEATURES || {});
