# === CTO: Verify Flask routes and wire API blueprints + health endpoints if missing ===
set -euo pipefail
export LANG=C.UTF-8

echo "== STEP 1: Print key files and current route map =="

# Print key files (up to 400 lines)
for f in app.py __init__.py api.py auth.py uploads.py config.py models.py static/js/mina.api.js static/js/mina.socket.js static/ui/index.html; do
  echo "----- FILE: $f -----"
  if [ -f "$f" ]; then sed -n '1,400p' "$f"; else echo "MISSING: $f"; fi
done

# Try to import the Flask app to print the route map.
# We support two patterns:
#  - app.py exposes `app` directly
#  - __init__.py exposes create_app(); app.py imports and creates it
echo "----- ROUTE MAP -----"
python3 - <<'PY'
import importlib, sys
app = None
# Try pattern A: app.py has "app"
try:
    mod = importlib.import_module("app")
    app = getattr(mod, "app", None)
    if app is None and hasattr(mod, "create_app"):
        app = mod.create_app()
except Exception as e:
    print("[route-map] could not import app.py:", e, file=sys.stderr)
# Try pattern B: __init__.py has create_app
if app is None:
    try:
        imod = importlib.import_module("__init__")
        if hasattr(imod, "create_app"):
            app = imod.create_app()
    except Exception as e:
        print("[route-map] could not import __init__.py:", e, file=sys.stderr)

if app is None:
    print("[route-map] FAILED: could not obtain Flask app instance")
    sys.exit(0)

print("URL MAP:")
for r in app.url_map.iter_rules():
    methods = ",".join(sorted(m for m in r.methods if m not in ("HEAD","OPTIONS")))
    print(f"{r.rule:40s}  {methods:15s}  endpoint={r.endpoint}")
PY

echo
echo "== STEP 2: Determine port and base URL for tests =="

BASE="http://localhost:5000"
if [ -f ".replit" ]; then
  echo "----- .replit -----"
  sed -n '1,120p' .replit
  # best effort: detect a port in .replit run command
  CMD=$(grep -E '^run' .replit | head -n1 | sed 's/^run\s*=\s*//')
  if echo "$CMD" | grep -qE ':(8080|5000|3000)'; then
    PORT=$(echo "$CMD" | grep -oE ':[0-9]+' | head -n1 | tr -d ':')
    [ -n "$PORT" ] && BASE="http://localhost:${PORT}"
  fi
fi
echo "[ctobase] Using BASE=${BASE}"
export MINA_BASE_URL="${BASE}"

echo
echo "== STEP 3: Check if required endpoints exist =="
NEED_FIX=0
for EP in /healthz /readyz /api/conversations; do
  code=$(curl -s -o /dev/null -w "%{http_code}" "${BASE}${EP}" || true)
  echo "HEAD ${EP} -> ${code}"
  if [ "$code" = "404" ] || [ "$code" = "000" ]; then NEED_FIX=1; fi
done

# Prepare backup dir if we need to patch wiring
BACKUP_DIR=".mina_wire_$(date +%Y%m%d_%H%M%S)"

if [ "$NEED_FIX" -eq 1 ]; then
  echo
  echo "== STEP 4: Apply safe wiring fix (backups created in ${BACKUP_DIR}) =="

  mkdir -p "$BACKUP_DIR"

  # 4a) Ensure __init__.py defines create_app() that registers blueprints and health routes.
  if [ -f "__init__.py" ]; then cp "__init__.py" "$BACKUP_DIR/__init__.py.bak"; fi
  cat > __init__.py <<'PY'
import os
from flask import Flask, send_from_directory
from flask_cors import CORS

def create_app():
    app = Flask(__name__, static_folder="static", static_url_path="/static")
    # Load Config if present
    try:
        app.config.from_object("config.Config")
    except Exception:
        pass

    # CORS (adjust origins as needed)
    CORS(app, resources={r"/api/*": {"origins": os.environ.get("CORS_ALLOW","*")}}, supports_credentials=True)

    # Register blueprints if files exist/importable
    def _try_register(bpmod, bpname):
        try:
            mod = __import__(bpmod, fromlist=[bpname])
            bp = getattr(mod, bpname)
            app.register_blueprint(bp)
            print(f"[init] registered blueprint: {bpmod}.{bpname}")
        except Exception as e:
            print(f"[init] could not register {bpmod}.{bpname}: {e}")

    _try_register("auth", "bp_auth")
    _try_register("api", "bp_api")
    _try_register("uploads", "bp_uploads")

    @app.route("/")
    def welcome():
        return send_from_directory(app.static_folder + "/ui", "welcome.html")

    @app.route("/app")
    def app_spa():
        return send_from_directory(app.static_folder + "/ui", "index.html")

    @app.route("/terms")
    def terms():
        return send_from_directory(app.static_folder + "/ui", "terms.html")

    @app.route("/privacy")
    def privacy():
        return send_from_directory(app.static_folder + "/ui", "privacy.html")

    @app.route("/healthz")
    def healthz():
        return "ok", 200

    @app.route("/readyz")
    def readyz():
        try:
            # optional DB check if models available
            from models import db
            db.session.execute("SELECT 1")
            return "ok", 200
        except Exception:
            return "not ready", 503

    return app
PY
  echo "[wire] wrote __init__.py (create_app + health routes + blueprint registration)."

  # 4b) Ensure app.py uses create_app() and runs server
  if [ -f "app.py" ]; then cp "app.py" "$BACKUP_DIR/app.py.bak"; fi
  cat > app.py <<'PY'
import os
from __init__ import create_app

app = create_app()

if __name__ == "__main__":
    # Prefer PORT env or default 5000
    port = int(os.environ.get("PORT", "5000"))
    app.run(host="0.0.0.0", port=port)
PY
  echo "[wire] wrote app.py entrypoint."

  # 4c) If models.py defines SQLAlchemy db, make sure db.init_app is called.
  # (We don't modify models.py here; __init__.py's readyz tries to import it if present.)

  echo "[wire] restart not strictly required in Replit, but we will try smoke again."
else
  echo "== STEP 4: No wiring fix needed (endpoints responded). =="
fi

echo
echo "== STEP 5: Rerun smoke + soak tests using tools/ if present =="

if [ -f "tools/smoke_api.py" ]; then
  python3 tools/smoke_api.py || echo "[!] Smoke test FAILED"
else
  echo "[note] tools/smoke_api.py not found"
fi

if [ -f "tools/soak_segments.py" ]; then
  SOAK_USERS=1 SOAK_SEGS=40 python3 tools/soak_segments.py || echo "[!] Soak test FAILED"
else
  echo "[note] tools/soak_segments.py not found"
fi

echo
echo "== STEP 6: Print final route map after any changes =="
python3 - <<'PY'
import importlib, sys
app=None
try:
    from app import app as a
    app=a
except Exception:
    try:
        from __init__ import create_app
        app=create_app()
    except Exception as e:
        print("could not import app:", e)
        sys.exit(0)

print("URL MAP (post-fix):")
for r in app.url_map.iter_rules():
    methods = ",".join(sorted(m for m in r.methods if m not in ("HEAD","OPTIONS")))
    print(f"{r.rule:40s}  {methods:15s}  endpoint={r.endpoint}")
PY

echo "== DONE. Paste this full output back to CTO. =="