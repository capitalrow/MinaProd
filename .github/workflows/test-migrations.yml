name: Test Database Migrations

# ==============================================================================
# MIGRATION CI PIPELINE
# ==============================================================================
# This workflow automatically tests database migrations on every pull request.
# It ensures migrations can be applied AND rolled back safely before merge.
#
# CRITICAL: Failed rollback = blocked merge
# This prevents broken migrations from reaching production.
# ==============================================================================

on:
  pull_request:
    paths:
      - 'migrations/**'
      - 'models.py'
      - 'models/**'
      - 'alembic.ini'
      - '.github/workflows/test-migrations.yml'
  push:
    branches:
      - main
      - staging
    paths:
      - 'migrations/**'

jobs:
  # ----------------------------------------------------------------------------
  # Job 1: Test Migration Up (Apply)
  # ----------------------------------------------------------------------------
  test-migration-up:
    name: Test Migration Apply
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_mina
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          # Install full project dependencies for complete application context
          pip install -r requirements.txt
      
      - name: Set environment variables
        run: |
          echo "DATABASE_URL=postgresql://test_user:test_password@localhost:5432/test_mina" >> $GITHUB_ENV
          echo "FLASK_APP=main.py" >> $GITHUB_ENV
          echo "SECRET_KEY=test_secret_key_for_ci" >> $GITHUB_ENV
      
      - name: Apply all migrations (up)
        run: |
          echo "🔄 Applying all migrations to empty database..."
          flask db upgrade
          echo "✅ All migrations applied successfully"
      
      - name: Verify database state
        run: |
          echo "📊 Checking database tables..."
          psql $DATABASE_URL -c "\dt"
          echo "✅ Database state verified"
  
  # ----------------------------------------------------------------------------
  # Job 2: Test Migration Down (Rollback) - CRITICAL
  # ----------------------------------------------------------------------------
  test-migration-rollback:
    name: Test Migration Rollback
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_mina_rollback
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          # Install full project dependencies for complete application context
          pip install -r requirements.txt
      
      - name: Set environment variables
        run: |
          echo "DATABASE_URL=postgresql://test_user:test_password@localhost:5432/test_mina_rollback" >> $GITHUB_ENV
          echo "FLASK_APP=main.py" >> $GITHUB_ENV
          echo "SECRET_KEY=test_secret_key_for_ci" >> $GITHUB_ENV
      
      - name: Apply all migrations
        run: |
          echo "🔄 Applying all migrations..."
          flask db upgrade
          echo "✅ Migrations applied"
      
      - name: Rollback one migration
        run: |
          echo "⏪ Rolling back latest migration..."
          flask db downgrade -1
          echo "✅ Rollback successful"
      
      - name: Re-apply latest migration
        run: |
          echo "🔄 Re-applying latest migration..."
          flask db upgrade
          echo "✅ Re-application successful"
      
      - name: Full rollback test
        run: |
          echo "⏪ Rolling back ALL migrations..."
          flask db downgrade base
          echo "✅ Full rollback successful"
      
      - name: Full upgrade test
        run: |
          echo "🔄 Re-applying all migrations from base..."
          flask db upgrade
          echo "✅ Full upgrade from base successful"
  
  # ----------------------------------------------------------------------------
  # Job 3: Test Idempotency (Multiple Applications)
  # ----------------------------------------------------------------------------
  test-migration-idempotency:
    name: Test Migration Idempotency
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_mina_idempotency
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          # Install full project dependencies for complete application context
          pip install -r requirements.txt
      
      - name: Set environment variables
        run: |
          echo "DATABASE_URL=postgresql://test_user:test_password@localhost:5432/test_mina_idempotency" >> $GITHUB_ENV
          echo "FLASK_APP=main.py" >> $GITHUB_ENV
          echo "SECRET_KEY=test_secret_key_for_ci" >> $GITHUB_ENV
      
      - name: Apply migrations (first time)
        run: |
          echo "🔄 First migration application..."
          flask db upgrade
          echo "✅ First application successful"
      
      - name: Apply migrations (second time - should be no-op)
        run: |
          echo "🔄 Second migration application (should be no-op)..."
          flask db upgrade
          echo "✅ Idempotent - no errors on re-application"
  
  # ----------------------------------------------------------------------------
  # Job 4: Test Migration Conflicts (Data Integrity)
  # ----------------------------------------------------------------------------
  test-migration-with-data:
    name: Test Migrations with Sample Data
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_mina_data
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          # Install full project dependencies for complete application context
          pip install -r requirements.txt
      
      - name: Set environment variables
        run: |
          echo "DATABASE_URL=postgresql://test_user:test_password@localhost:5432/test_mina_data" >> $GITHUB_ENV
          echo "FLASK_APP=main.py" >> $GITHUB_ENV
          echo "SECRET_KEY=test_secret_key_for_ci" >> $GITHUB_ENV
      
      - name: Apply all migrations
        run: |
          echo "🔄 Applying migrations..."
          flask db upgrade
      
      - name: Insert sample data (schema-aware)
        run: |
          echo "📝 Inserting sample data (checking schema first)..."
          psql $DATABASE_URL <<'EOF'
            DO $$
            DECLARE
              users_exists BOOLEAN;
              sessions_exists BOOLEAN;
            BEGIN
              -- Check if tables exist
              SELECT EXISTS (
                SELECT FROM information_schema.tables 
                WHERE table_name = 'users'
              ) INTO users_exists;
              
              SELECT EXISTS (
                SELECT FROM information_schema.tables 
                WHERE table_name = 'sessions'
              ) INTO sessions_exists;
              
              -- Insert into users if table exists
              IF users_exists THEN
                INSERT INTO users (username, email, password_hash)
                VALUES 
                  ('test_user', 'test@example.com', 'hash123'),
                  ('admin_user', 'admin@example.com', 'hash456')
                ON CONFLICT DO NOTHING;
                RAISE NOTICE 'Inserted sample users';
              ELSE
                RAISE NOTICE 'Users table does not exist, skipping';
              END IF;
              
              -- Insert into sessions if table exists
              IF sessions_exists THEN
                -- Only insert if users table also exists (FK dependency)
                IF users_exists THEN
                  INSERT INTO sessions (title, user_id)
                  SELECT 'Test Session', id FROM users LIMIT 1
                  ON CONFLICT DO NOTHING;
                  RAISE NOTICE 'Inserted sample sessions';
                ELSE
                  RAISE NOTICE 'Sessions table exists but users table missing, skipping';
                END IF;
              ELSE
                RAISE NOTICE 'Sessions table does not exist, skipping';
              END IF;
            END $$;
          EOF
          echo "✅ Sample data insertion completed (schema-aware)"
      
      - name: Verify data exists (if tables present)
        run: |
          echo "📊 Verifying sample data..."
          psql $DATABASE_URL <<'EOF'
            DO $$
            BEGIN
              IF EXISTS (SELECT FROM information_schema.tables WHERE table_name = 'users') THEN
                PERFORM pg_advisory_xact_lock(1);
                RAISE NOTICE 'Users count: %', (SELECT COUNT(*) FROM users);
              END IF;
              
              IF EXISTS (SELECT FROM information_schema.tables WHERE table_name = 'sessions') THEN
                PERFORM pg_advisory_xact_lock(2);
                RAISE NOTICE 'Sessions count: %', (SELECT COUNT(*) FROM sessions);
              END IF;
            END $$;
          EOF
      
      - name: Rollback with data present (MUST succeed)
        run: |
          echo "⏪ Rolling back with data present..."
          echo "⚠️  CRITICAL: This MUST succeed or PR will be blocked"
          flask db downgrade -1
          echo "✅ Rollback succeeded with data present"
      
      - name: Re-upgrade with data present
        run: |
          echo "🔄 Re-upgrading..."
          flask db upgrade
          echo "✅ Migration works with existing data"
  
  # ----------------------------------------------------------------------------
  # Job 5: Report Migration Summary
  # ----------------------------------------------------------------------------
  migration-summary:
    name: Migration Summary
    runs-on: ubuntu-latest
    needs: [test-migration-up, test-migration-rollback, test-migration-idempotency, test-migration-with-data]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Count migrations
        run: |
          echo "📊 Migration Statistics:"
          echo "Total migrations: $(ls -1 migrations/versions/*.py 2>/dev/null | wc -l)"
          echo ""
          echo "Recent migrations:"
          ls -lt migrations/versions/*.py 2>/dev/null | head -5 || echo "No migrations found"
      
      - name: Success summary
        run: |
          echo "✅ All migration tests passed!"
          echo ""
          echo "Tested:"
          echo "  ✅ Migration application (up)"
          echo "  ✅ Migration rollback (down)"
          echo "  ✅ Idempotency (multiple applications)"
          echo "  ✅ Data integrity (with sample data)"
          echo ""
          echo "This PR is safe to merge from a migration perspective."

# ==============================================================================
# USAGE NOTES
# ==============================================================================
# 1. This workflow runs on every PR that modifies migrations/
# 2. All 4 test jobs must pass for PR to be mergeable
# 3. Failed rollback = blocked merge (critical safety check)
# 4. Tests run in parallel for speed (5-10 minutes total)
#
# REQUIRED GITHUB SETTINGS:
# - Repository Settings → Branches → main
#   - Require status checks to pass before merging
#   - Select: test-migration-up, test-migration-rollback, etc.
#
# TROUBLESHOOTING:
# - "Migration fails with data" → Add data migration script
# - "Rollback fails" → Fix downgrade() function in migration
# - "Idempotency fails" → Remove CREATE TABLE IF NOT EXISTS logic
# ==============================================================================
