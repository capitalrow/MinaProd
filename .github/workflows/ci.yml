name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '20'

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: mina_test
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: mina_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install Node dependencies
        run: npm ci

      - name: Initialize test database
        env:
          DATABASE_URL: postgresql://mina_test:test_password@localhost:5432/mina_test
          SESSION_SECRET: test-secret-key-for-ci
          FLASK_ENV: testing
        run: |
          python -c "
          from app import create_app
          from models import db
          app = create_app()
          with app.app_context():
              db.create_all()
          "

      - name: Run unit tests with coverage
        env:
          DATABASE_URL: postgresql://mina_test:test_password@localhost:5432/mina_test
          SESSION_SECRET: test-secret-key-for-ci
          FLASK_ENV: testing
        run: |
          pytest tests/unit/ -v

      - name: Run integration tests with coverage
        env:
          DATABASE_URL: postgresql://mina_test:test_password@localhost:5432/mina_test
          SESSION_SECRET: test-secret-key-for-ci
          FLASK_ENV: testing
        run: |
          pytest tests/integration/ -v

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./tests/results/coverage.xml
          flags: unittests
          fail_ci_if_error: false

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            tests/results/
          retention-days: 7

  lint:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff black

      - name: Run Ruff linter
        run: ruff check . --output-format=github
        continue-on-error: true

      - name: Run Black formatter check
        run: black --check .
        continue-on-error: true

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit

      - name: Run Safety check
        run: safety check --json > safety-report.json || true

      - name: Run Bandit security linter
        run: bandit -r . -x ./tests,./legacy -f json -o bandit-report.json || true

      - name: Upload security reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            safety-report.json
            bandit-report.json
          retention-days: 30
